TypeMismatch:
In file $FILE:2:16 ->

  1 │   open import arith::nat::base
  2 │   def test => 1 + Type
    │                   ╰──╯

Error: Cannot check the expression
         Type 0
       of type
         Type 1
       against the type
         Nat

1 error(s), 0 warning(s).
Let's learn from that.

IllTypedApp:
In file $FILE:2:22 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) => a 1
    │                         ╰─╯

Error: The following application is not good:
         a 1
       because the type of what you applied is not a Pi/Path type, but instead:
         Nat

In file $FILE:2:4 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) => a 1
    │       ╰──╯

Error: Unsolved meta _

2 error(s), 0 warning(s).
Let's learn from that.

WantButNo:
In file $FILE:2:19 ->

  1 │   open import arith::nat::base
  2 │   def test : Type => \ x => x
    │                      ╰──────╯

Error: The following abstraction is not good:
         \ x ⇒ x
       because the type being expected is not a Pi/Path type, but instead:
         Type 0

1 error(s), 0 warning(s).
Let's learn from that.

CringeReturnType:
In file $FILE:2:11 ->

  1 │   def fr : Type -> Type => \x => x
  2 │   def test : fr => Type
    │              ╰╯

Error: The following expression is not good:
         fr
       because the type provided is not a type, but instead:
         Type 0 → Type 0

1 error(s), 0 warning(s).
Let's learn from that.

BadInterval:
In file $FILE:2:16 ->

  1 │   prim I
  2 │   def test : I => 2
    │                   ╰╯

Error: The point `2` does not live in interval
note: Did you mean: `0` or `1`

1 error(s), 0 warning(s).
Let's learn from that.

BadPrim:
In file $FILE:1:0 ->

  1 │   prim I : Type
    │   ╰───────────╯

Error: The level here is expected to be ISet but it is actually Type 0

In file $FILE:1:5 ->

  1 │   prim I : Type
    │        ╰╯

Error: The prim declaration
         prim I
       should have type
         ISet
       but you gave
         Type 0

2 error(s), 0 warning(s).
Let's learn from that.

PrimNoResult:
In file $FILE:2:5 ->

  1 │   prim I
  2 │   prim Path (A : I -> Type) (a b : A)
    │        ╰──╯

Error: `prim Path` is expected to have a return type

In file $FILE:2:5 ->

  1 │   prim I
  2 │   prim Path (A : I -> Type) (a b : A)
    │        ╰──╯

Error: `prim Path` is expected to have a return type

2 error(s), 0 warning(s).
Let's learn from that.

PiDom:
In file $FILE:2:28 ->

  1 │   inductive X : Set
  2 │   inductive Test : Type | con X
    │                               ╰╯

Error: The type
         X
       is in the domain of a function whose type is
         Type 0

1 error(s), 0 warning(s).
Let's learn from that.

PiDomMeta:
In file $FILE:4:19 ->

  2 │   inductive infix = (a b : X) : Type
  3 │   inductive Test : Type
  4 │   | con (x : _) (y : X) (x = y)
    │                      ╰╯

Error: The type
         X
       is in the domain of a function whose type is
         Type 0

In file $FILE:4:11 ->

  2 │   inductive infix = (a b : X) : Type
  3 │   inductive Test : Type
  4 │   | con (x : _) (y : X) (x = y)
    │              ╰╯

Error: The meta (denoted ? below) is supposed to satisfy:
         ? → _ : Type 0
       The meta itself:
         `?_`
       However, the solution below does not seem so:
         X

2 error(s), 0 warning(s).
Let's learn from that.

ConReturn:
In file $FILE:2:14 ->

  1 │   inductive X
  2 │   inductive Y | con : X
    │                 ╰─╯

Error: Cannot make sense of the return type of the constructor
         | con : X
       which eventually returns
         Y
       while it should return
         X

1 error(s), 0 warning(s).
Let's learn from that.

NoRule:
In file $FILE:1:9 ->

  1 │   def x => "114514"
    │            ╰──────╯

Error: No rule inferring the type of "114514"

In file $FILE:1:4 ->

  1 │   def x => "114514"
    │       ╰╯

Error: Unsolved meta _

2 error(s), 0 warning(s).
Let's learn from that.

MatchMissingReturns:
In file $FILE:3:4 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) : Nat =>
  3 │       match a { _ => fn x => x } 1
    │       ╰────────────────────────╯

Error: The match expression here is in a spot where the return type is required.
       Try adding `returns` followed by a type after the expression being 
       matched.

In file $FILE:3:4 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) : Nat =>
  3 │       match a { _ => fn x => x } 1
    │       ╰──────────────────────────╯

Error: The following application is not good:
         match a {
          | _ ⇒ \ x ⇒ x
        } 1
       because the type of what you applied is not a Pi/Path type, but instead:
         <type of `match a {
          | _ ⇒ \ x ⇒ x
        }`>

2 error(s), 0 warning(s).
Let's learn from that.

Issue1238:
In file $FILE:3:25 ->

  1 │   open import relation::binary::path
  2 │   open inductive Wrap (A : Type) | wrap A
  3 │   def what (A : Type) (w : Wrap) : w = w => refl
    │                            ╰──╯

Error: The following expression is not good:
         Wrap
       because the type provided is not a type, but instead:
         Type 0 → Type 0

In file $FILE:3:42 ->

  1 │   open import relation::binary::path
  2 │   open inductive Wrap (A : Type) | wrap A
  3 │   def what (A : Type) (w : Wrap) : w = w => refl
    │                                             ╰──╯

Error: Unsolved meta A
       in `refl {?A A w} {w}`

2 error(s), 0 warning(s).
Let's learn from that.

