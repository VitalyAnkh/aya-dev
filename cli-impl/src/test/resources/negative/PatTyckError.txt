UnknownCon:
In file $FILE:5:2 ->

  3 │   
  4 │   def test Test1 : Test1
  5 │   | test2 => test1
    │     ╰───╯

Error: Unknown constructor
         test2

1 error(s), 0 warning(s).
What are you doing?

SelectionFailed:
In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:7 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │          ╰╯

Warning: The name `xs` shadows a previous local definition from outer scope

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:30:5 ->

  27 │       def ++-assoc (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  28 │         : Path (\i => Vec (+-assoc i) A)
  29 │           (xs ++ (ys ++ zs))
     │            ╰──────────────╯ ?a n A m o xs ys zs 0 >= n, ?b n A m o xs ys zs
                                   0 >= m, ?c n A m o xs ys zs 0 >= o
  30 │           ((xs ++ ys) ++ zs) elim xs
     │            ╰──────────────╯
     │            ╰──────────────╯ ?a n A m o xs ys zs 1 >= n, ?b n A m o xs ys zs
                                   1 >= m, ?c n A m o xs ys zs 1 >= o

Info: Solving equation(s) with not very general solution(s)

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:31:8 ->

  29 │       (xs ++ (ys ++ zs))
  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
     │           ╰──╯

Error: The solution
         Vec (+-assoc {zero} {m} {o} _Dim_0) A
       is not well-scoped
       Only the variables below are allowed: `A`, `m`, `o`, `ys`, `zs`

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:31:8 ->

  29 │       (xs ++ (ys ++ zs))
  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
     │           ╰──╯

Error: Cannot check the expression
         refl
       of type
         (=) {?A A m o ys zs} (?a A m o ys zs) (?a A m o ys zs)
         (Normalized: ?a A m o ys zs = ?a A m o ys zs)
       against the type
         (++) {zero} {A} {m + o} [] ((++) {m} {A} {o} ys zs) = (++) {zero + m} {A}
        {o} ((++) {zero} {A} {m} [] ys) zs
       In particular, we failed to unify
         ?A A m o ys zs
       with
         Vec (+-assoc {zero} {m} {o} _Dim_0) A

Cannot check the expression
  _
of type
  Nat
against the type
  Vec (?n A x xs n m o ys zs _) A
In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:-1 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │   ╰────────────────────────────────────────────╯

Error: Cannot check the expression
         x :> _
       of type
         Vec (suc (?n A x xs n m o ys zs _)) A
       against the type
         Vec _ A
       In particular, we failed to unify
         suc (?n A x xs n m o ys zs _)
       with
         _

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:48 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │                                                   ╰───────────────╯

Error: Cannot check the expression
         ++-assoc xs ys zs
       of type
         (++) {n} {A} {m + o} xs ((++) {m} {A} {o} ys zs) = (++) {n + m} {A} {o}
        ((++) {n} {A} {m} xs ys) zs
       against the type
         ?a A x xs n m o ys zs = ?b A x xs n m o ys zs
       In particular, we failed to unify
         Vec (+-assoc {n} {m} {o} _Dim_0) A
       with
         Nat

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:13 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │                ╰───────────────────────────────────────────────────╯

Error: Cannot check the expression
         pmapd {\ n ⇒ Vec n A} (\ _ ⇒ x :> _) (++-assoc xs ys zs)
       of type
         (x :> ?a A x xs n m o ys zs) = (x :> ?b A x xs n m o ys zs)
       against the type
         (++) {suc n} {A} {m + o} (x :> xs) ((++) {m} {A} {o} ys zs) = (++) {suc
        n + m} {A} {o} ((++) {suc n} {A} {m} (x :> xs) ys) zs
       In particular, we failed to unify
         ++-assoc {n} {A} {m} {o} xs ys zs _Dim_0
       with
         suc (+-assoc {n} {m} {o} _Dim_0)

In file $FILE:4:2 ->

  2 │   open import data::Vec::base
  3 │   def mapImpl {A B : Type} {n : Nat} (f : A -> B) (xs : Vec (n + n) A) : Vec (n + n) B elim xs
  4 │   | [] => []
    │     ╰╯

Error: I'm unsure if there should be a case for
         []
       as index unification is blocked for type
         Vec (<n> + <n>) A

In file $FILE:5:2 ->

  3 │   def mapImpl {A B : Type} {n : Nat} (f : A -> B) (xs : Vec (n + n) A) : Vec (n + n) B elim xs
  4 │   | [] => []
  5 │   | _ :> _ => _
    │     ╰────╯

Error: I'm unsure if there should be a case for
         :> _ _
       as index unification is blocked for type
         Vec (<n> + <n>) A

8 error(s), 1 warning(s).
What are you doing?

SelectionBlocked:
In file $FILE:4:2 ->

  2 │   open import data::Vec::base
  3 │   def mapImpl {A B : Type} {n : Nat} (f : A -> B) (xs : Vec (n + n) A) : Vec (n + n) B elim xs
  4 │   | () => []
    │     ╰╯

Error: Unsure if this pattern is actually impossible, as constructor selection 
       is blocked on:
         Vec (<n> + <n>) A

1 error(s), 0 warning(s).
What are you doing?

SplitOnNonData:
In file $FILE:3:3 ->

  1 │   open inductive Unit | unit
  2 │   def test (a : Type) : Type
  3 │    | unit y => a
    │      ╰────╯

Error: Cannot split on a non-inductive type
         Type 0
       with a constructor pattern
         unit y

1 error(s), 0 warning(s).
What are you doing?

BadLiteral:
In file $FILE:3:2 ->

  1 │   open inductive Test | t
  2 │   def not-conf Test : Test
  3 │   | 1 => t
    │     ╰╯

Error: The literal
         1
       cannot be encoded as a term of type:
         Test

1 error(s), 0 warning(s).
What are you doing?

NotEnoughPattern:
In file $FILE:3:8 ->

  1 │   open import arith::bool::base
  2 │   def ifElse {A : Type} (b : Bool) A A : A
  3 │   | true, x => x
    │           ╰╯

Error: There is no pattern for the parameter
         ^2

1 error(s), 0 warning(s).
What are you doing?

TooManyPattern:
In file $FILE:3:11 ->

  1 │   open import arith::bool::base
  2 │   def ifElse {A : Type} (b : Bool) A A : A
  3 │   | true, x, {y} => x
    │              ╰─╯

Error: There are too many implicit patterns:
         y
       should be an explicit pattern matched against
         ^2

1 error(s), 0 warning(s).
What are you doing?

TooManyPattern2:
In file $FILE:3:14 ->

  1 │   open import arith::bool::base
  2 │   def ifElse {A : Type} (b : Bool) A A : A
  3 │   | true, x, y, z => x
    │                 ╰╯

Error: There is no parameter for the pattern
         z
       to match against.
       (and in case it's a function type, you may want to move its parameters 
       before the `:` in the signature)

1 error(s), 0 warning(s).
What are you doing?

InvalidEmptyBody:
In file $FILE:3:2 ->

  1 │   open import arith::bool::base
  2 │   def test Bool : Bool
  3 │   | true
    │     ╰──╯

Error: This match arm does not contain any absurd pattern but it has an empty 
       body

In file $FILE:4:2 ->

  2 │   def test Bool : Bool
  3 │   | true
  4 │   | false
    │     ╰───╯

Error: This match arm does not contain any absurd pattern but it has an empty 
       body

2 error(s), 0 warning(s).
What are you doing?

InvalidAbsurdPattern:
In file $FILE:2:23 ->

  1 │   open import arith::bool::base
  2 │   def test Bool : Bool | ()
    │                          ╰╯

Error: Absurd pattern does not fit here because `true` is still available

1 error(s), 0 warning(s).
What are you doing?

NoPattern:
In file $FILE:4:0 ->

  2 │   
  3 │   variable A B : Type
  4 │   def funExt (f g : A -> B) (p : forall a -> f a = g a) : f = g
    │   ╰────────────────────────────────────────────────────────────╯

Error: Unhandled case:
         A, B, f, g, p

1 error(s), 0 warning(s).
What are you doing?

NewRepoIssue597:
In file $FILE:2:22 ->

  1 │   open inductive Nat | O | S Nat
  2 │   def bad Nat : Nat | S S O => O | _ => O
    │                         ╰╯

Error: There is no pattern for the parameter
         Nat

In file $FILE:2:24 ->

  1 │   open inductive Nat | O | S Nat
  2 │   def bad Nat : Nat | S S O => O | _ => O
    │                           ╰╯

Error: There is no parameter for the pattern
         O
       to match against.
       (and in case it's a function type, you may want to move its parameters 
       before the `:` in the signature)

2 error(s), 0 warning(s).
What are you doing?

NewRepoIssue746:
In file $FILE:4:2 ->

  2 │   open inductive Test2 | test2
  3 │   def test Test1 : Test1
  4 │   | test2 => test1
    │     ╰───╯

Error: Unknown constructor
         test2

1 error(s), 0 warning(s).
What are you doing?

NewRepoIssue384:
In file $FILE:1:4 ->

  1 │   def test : Type
    │       ╰──╯

Error: The empty pattern-matching function test does not have a telescope

1 error(s), 0 warning(s).
What are you doing?

