Unsolved:
In file $FILE:2:18 ->

  1 │   open import arith::nat::base
  2 │   def test : Nat => _
    │                     ╰╯

Error: Unsolved meta _

1 error(s), 0 warning(s).
What are you doing?

Goal:
In file $FILE:2:28 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) : Nat => {? a ?}
    │                               ╰─────╯

Goal: Goal of type
        Nat
        (WHNF: Nat)
      Context:
        a

In file $FILE:2:28 ->

  1 │   open import arith::nat::base
  2 │   def test (a : Nat) : Nat => {? a ?}
    │                               ╰─────╯

Error: Unsolved meta _

1 error(s), 0 warning(s).
What are you doing?

UnsolvedMetaLit:
In file $FILE:5:17 ->

  3 │   open inductive Option (A : Type)
  4 │     | some A
  5 │   def test => some 114514
    │                    ╰────╯

Error: Unsolved meta A
       in `Option ?A`

In file $FILE:5:17 ->

  3 │   open inductive Option (A : Type)
  4 │     | some A
  5 │   def test => some 114514
    │                    ╰────╯

Error: Unsolved meta A
       in `some 114514`

In file $FILE:5:17 ->

  3 │   open inductive Option (A : Type)
  4 │     | some A
  5 │   def test => some 114514
    │                    ╰────╯

Error: Unable to solve the type of this literal:
         114514
       I'm confused about the following candidates:
         `Nat`, `Nat2`

3 error(s), 0 warning(s).
What are you doing?

Daylily:
In file $FILE:5:12 ->

  3 │       def wow {A : Type 1} {B : A -> Type} (a b : A) (x : B a) (y : B b) : Nat => 0
  4 │       example def test1 (A B : Type) (x : A) (y : B) =>
  5 │         wow A B x y
    │                 ╰╯  ╰╯ ?B A B x y A >= A
    │                   ╰╯ ?B A B x y B >= B

Info: Solving equation(s) with not very general solution(s)

That looks right!

Norell:
In file $FILE:7:28 ->

  5 │   def test
  6 │    (F : Type -> Type)
  7 │    (g : ∀ (X : F _) -> F (Neg X)) : Nat => g 0
    │                               ╰╯

Error: Cannot check the expression
         X
       of type
         F (?_ F)
       against the type
         Type 0

In file $FILE:7:43 ->

  5 │   def test
  6 │    (F : Type -> Type)
  7 │    (g : ∀ (X : F _) -> F (Neg X)) : Nat => g 0
    │                                              ╰╯

Error: Cannot check the expression
         0
       of type
         Nat
       against the type
         F (?_ F)

In file $FILE:7:41 ->

  5 │   def test
  6 │    (F : Type -> Type)
  7 │    (g : ∀ (X : F _) -> F (Neg X)) : Nat => g 0
    │                                            ╰─╯

Error: Cannot check the expression
         g 0
       of type
         F (Neg 0)
         (Normalized: F (0 → Empty))
       against the type
         Nat

In file $FILE:7:15 ->

  5 │   def test
  6 │    (F : Type -> Type)
  7 │    (g : ∀ (X : F _) -> F (Neg X)) : Nat => g 0
    │                  ╰╯

Error: Unsolved meta _
       in `^0 (?_ ^0)`
       in `Fn (_0 : ^0 (?_ ^0)) → ^1 (Neg _0)`

4 error(s), 0 warning(s).
What are you doing?

ScopeCheck:
In file $FILE:5:14 ->

  3 │   
  4 │   // https://cstheory.stackexchange.com/a/49160/50892
  5 │   def test (a : _) (B : Type) (b : B) (p : a = b) : I => 0
    │                 ╰╯

Error: The solution
         B
       is not well-scoped
       Only the variables below are allowed: 

In file $FILE:5:14 ->

  3 │   
  4 │   // https://cstheory.stackexchange.com/a/49160/50892
  5 │   def test (a : _) (B : Type) (b : B) (p : a = b) : I => 0
    │                 ╰╯

Error: Unsolved meta _

2 error(s), 0 warning(s).
What are you doing?

LiteralAmbiguous3:
In file $FILE:6:11 ->

  4 │   
  5 │   def good : List Unit => [ ]
  6 │   def bad => [ unit ]
    │              ╰──────╯

Error: Unable to solve the type of this literal:
         [unit]
       I'm confused about the following candidates:
         `List`, `List2`

1 error(s), 0 warning(s).
What are you doing?

NonPattern:
In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:7 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │          ╰╯

Warning: The name `xs` shadows a previous local definition from outer scope

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:30:5 ->

  27 │       def ++-assoc (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  28 │         : Path (\i => Vec (+-assoc i) A)
  29 │           (xs ++ (ys ++ zs))
     │            ╰──────────────╯ ?a n A m o xs ys zs 0 >= n, ?b n A m o xs ys zs
                                   0 >= m, ?c n A m o xs ys zs 0 >= o
  30 │           ((xs ++ ys) ++ zs) elim xs
     │            ╰──────────────╯
     │            ╰──────────────╯ ?a n A m o xs ys zs 1 >= n, ?b n A m o xs ys zs
                                   1 >= m, ?c n A m o xs ys zs 1 >= o

Info: Solving equation(s) with not very general solution(s)

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:31:8 ->

  29 │       (xs ++ (ys ++ zs))
  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
     │           ╰──╯

Error: The solution
         Vec (+-assoc {zero} {m} {o} _Dim_0) A
       is not well-scoped
       Only the variables below are allowed: `A`, `m`, `o`, `ys`, `zs`

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:31:8 ->

  29 │       (xs ++ (ys ++ zs))
  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
     │           ╰──╯

Error: Cannot check the expression
         refl
       of type
         (=) {?A A m o ys zs} (?a A m o ys zs) (?a A m o ys zs)
         (Normalized: ?a A m o ys zs = ?a A m o ys zs)
       against the type
         (++) {zero} {A} {m + o} [] ((++) {m} {A} {o} ys zs) = (++) {zero + m} {A}
        {o} ((++) {zero} {A} {m} [] ys) zs
       In particular, we failed to unify
         ?A A m o ys zs
       with
         Vec (+-assoc {zero} {m} {o} _Dim_0) A

Cannot check the expression
  _
of type
  Nat
against the type
  Vec (?n A x xs n m o ys zs _) A
In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:-1 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │   ╰────────────────────────────────────────────╯

Error: Cannot check the expression
         x :> _
       of type
         Vec (suc (?n A x xs n m o ys zs _)) A
       against the type
         Vec _ A
       In particular, we failed to unify
         suc (?n A x xs n m o ys zs _)
       with
         _

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:48 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │                                                   ╰───────────────╯

Error: Cannot check the expression
         ++-assoc xs ys zs
       of type
         (++) {n} {A} {m + o} xs ((++) {m} {A} {o} ys zs) = (++) {n + m} {A} {o}
        ((++) {n} {A} {m} xs ys) zs
       against the type
         ?a A x xs n m o ys zs = ?b A x xs n m o ys zs
       In particular, we failed to unify
         Vec (+-assoc {n} {m} {o} _Dim_0) A
       with
         Nat

In file C:\Users\ice10\git-repos\aya-dev\cli-impl\src\test\resources\shared\src\data\Vec\base.aya:32:13 ->

  30 │       ((xs ++ ys) ++ zs) elim xs
  31 │   | [] => refl
  32 │   | x :> xs => pmapd {B := \n => Vec n A} (x :>) (++-assoc xs ys zs)
     │                ╰───────────────────────────────────────────────────╯

Error: Cannot check the expression
         pmapd {\ n ⇒ Vec n A} (\ _ ⇒ x :> _) (++-assoc xs ys zs)
       of type
         (x :> ?a A x xs n m o ys zs) = (x :> ?b A x xs n m o ys zs)
       against the type
         (++) {suc n} {A} {m + o} (x :> xs) ((++) {m} {A} {o} ys zs) = (++) {suc
        n + m} {A} {o} ((++) {suc n} {A} {m} (x :> xs) ys) zs
       In particular, we failed to unify
         ++-assoc {n} {A} {m} {o} xs ys zs _Dim_0
       with
         suc (+-assoc {n} {m} {o} _Dim_0)

In file $FILE:9:3 ->

  6 │       def ++-assoc-type (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  7 │         => Path (fn i => Vec (+-assoc i) A)
  8 │         (xs ++ (ys ++ zs))
    │          ╰──────────────╯ ?a n A m o xs ys zs 0 >= n, ?b n A m o xs ys zs 0 >= m,
                                ?c n A m o xs ys zs 0 >= o
  9 │         ((xs ++ ys) ++ zs)
    │          ╰──────────────╯
    │          ╰──────────────╯ ?a n A m o xs ys zs 1 >= n, ?b n A m o xs ys zs 1 >= m,
                                ?c n A m o xs ys zs 1 >= o

Info: Solving equation(s) with not very general solution(s)

6 error(s), 1 warning(s).
What are you doing?

