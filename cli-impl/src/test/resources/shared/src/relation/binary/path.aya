prim I : ISet
prim Path (A : I -> Type) (a : A 0) (b : A 1) : Type
prim coe (r s : I) (A : I -> Type) : A r -> A s

variable A B : Type
def infix = (a b : A) : Type => Path (\i => A) a b
def refl {a : A} : a = a => \i => a
def pmap (f : A -> B) {a b : A} (p : a = b) : f a = f b => \i => f (p i)
def pinv {a b : A} (p : a = b) : b = a => coe 0 1 (\i => p i = a) refl

def funExt (f g : A -> B) (p : ∀ a -> f a = g a) : f = g => \i a => p a i

def pmapd {A : I -> Type} (B : ∀ i -> A i -> Type)
    (f : ∀ i -> ∀ (a : A i) -> B i a) {a b : _} (p : Path A a b)
  : Path (\i => B i (p i)) (f 0 a) (f 1 b) => \i => f i (p i)

def hcomp2d
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c) : c = d
  => coe 0 1 (\ k => r k = q k) p

def infixr <=> {a b c : A} (p : a = b) (q : b = c) : a = c =>
  \k => hcomp2d p q refl k

/// Carlo Angiuli's PhD thesis, Section 3.2
module Angiuli {
  def transport {a b : A} (B : A -> Type) (p : a = b) (x : B a) : B b
    => coe 0 1 (\y => B (p y)) x
}
public open Angiuli using (transport)
