open import arith::Nat

open inductive List (A : Type)
| []
| infixr :< A (List A)

variable A B : Type

def length (List A) : Nat
| [] => 0
| x :< xs => 1 + length xs

def infixr ++ (xs ys : List A) : List A
| [], _ => ys
| _, [] => xs
| x :< xs', _ => x :< (xs' ++ ys)

def map (f : A -> B) (xs : List A) : List B elim xs
| [] => []
| x :< xs' => f x :< map f xs'
