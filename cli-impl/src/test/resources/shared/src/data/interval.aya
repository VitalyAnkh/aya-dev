open import paths

open inductive Interval
| left
| right
| line : left = right

variable
  A B : Type

private def lemma
  (f g : A → B) (p : ∀ x → f x = g x)
  (i : Interval) (a : A) : B elim i
| left ⇒ f a
| right ⇒ g a
| line j ⇒ p a j

example def funExt' (f g : A -> B) (p : ∀ a -> f a = g a) : f = g =>
  pmap (lemma f g p) (fn i => line i)
