open import arith::nat::base
open import relation::binary::path

open inductive List (A : Type)
| nil
| infixr :< A (List A) tighter =

variable A B : Type

def length (List A) : Nat
| [ ] => 0
| x :< xs => 1 + length xs

def infixr ++ (xs ys : List A) : List A
| [ ], _ => ys
| _, [ ] => xs
| x :< xs', _ => x :< (xs' ++ ys)
tighter =

def map (f : A -> B) (xs : List A) : List B elim xs
| [ ] => [ ]
| x :< xs' => f x :< map f xs'

def rev' (buf xs : List A) : List A elim xs
| [ ] => buf
| x :< xs => rev' (x :< buf) xs

def rev (xs : List A) : List A => rev' [ ] xs
