open import relation::binary::path using (= , refl)

open inductive Sum (A B : Type) | inl A | inr B

variable A B : Type

def Sum-rec
  (e : Sum A B)
  (P : Type)
  (lrec : A -> P)
  (rrec : B -> P)
  : P => Sum-ind e (fn _e => P) (fn a _p => lrec a) (fn b _p => rrec b)

def Sum-ind
  (e : Sum A B)
  (P : Sum A B -> Type)
  (lrec : Fn (a : A) -> e = inl a -> P (inl a))
  (rrec : Fn (b : B) -> e = inr b -> P (inr b))
  : P e elim e
| inl a => lrec a refl
| inr b => rrec b refl

def swap (Sum A B) : Sum B A
| inl a => inr a
| inr b => inl b
