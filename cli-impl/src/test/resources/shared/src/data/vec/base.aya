open import arith::nat::base
open import paths

open inductive Vec Nat Type
| 0, A => []
| suc n, A => infixr :> A (Vec n A)

variable A B : Type
variable n m o : Nat

def vmap (f : A -> B) (xs : Vec n A) : Vec n B elim xs
| [] => []
| x :> xs' => f x :> vmap f xs'

def head (Vec (suc n) A) : A
| x :> _ => x

def tail (Vec (suc n) A) : Vec n A
| _ :> xs => xs

overlap def infixr ++ (Vec n A) (Vec m A) : Vec (n + m) A
| [], ys => ys
| ys, [] => ys
| x :> xs, ys => x :> xs ++ ys
tighter :> =

def ++-assoc (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  : Path (\i => Vec (+-assoc i) A)
    (xs ++ (ys ++ zs))
    ((xs ++ ys) ++ zs)
| [], ys, zs => refl
| x :> xs', ys, zs => pmapd _ (\i => x :>) (++-assoc xs' ys zs)
