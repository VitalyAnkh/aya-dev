open import prelude hiding (++)
import data::list::base as lbase
import data::vec::base as vbase
open lbase using (List, :<, length)
open vbase using (Vec, :>, [], ++)

variable A : Type
variable n m o : Nat

def ++-assoc (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  : Path (\i => Vec (+-assoc i) A)
    (xs ++ (ys ++ zs))
    ((xs ++ ys) ++ zs) elim xs
| [] => refl
| x :> xs' => pmapd _ (\i => x :>) (++-assoc xs' ys zs)

def toList (Vec n A) : List A
| [] => [ ]
| x :> xs => x :< toList xs

def fromList (xs : List A) : Vec (length xs) A
| [ ] => []
| x :< xs' => x :> fromList xs'
