open import prelude

def test : Nat -> (Nat -> Nat) => match __ {
  | zero => __
  | 1 => fn y => y
  | _ => fn z => z
}

def id {A : Type} : A -> A => __

def last {A B C: Type} : A -> B -> C -> C => fn _ => fn _ => __

def addTwo : Nat -> Nat => __ + 2
def addEm : Nat -> Nat -> Nat => __ + (1 + __) * 2
def curry : Nat -> Nat => addEm 1 __
