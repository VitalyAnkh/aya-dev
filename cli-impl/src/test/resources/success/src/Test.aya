open import prelude

def something (a : Nat)
 : a + 1 + a = 1 + a + a => refl

def issue1061 : Nat -> Nat
| n => Nat::suc n

module Issue942 {
  open import arith::nat::properties
  open inductive Wrapper (P : Type)
  | wrap (P -> Empty)

  def what? (m : Nat) : Wrapper (suc m = 0) =>
    wrap (\ x => zâ‰ s (pinv x))
}

module Issue1130 {
  def f (p : I -> Nat) => 0
  def test => f (refl {a := 1})
}

module Issue1144 {
  open inductive NewList (A : Type)
  | newNil
  | newCons A (NewList A)

  private def test : NewList Nat => [ 0 ]
}

module Issue1145 {
  open Issue1144
  open inductive NewNat : Type
  | newZero
  | newSucc (pred : NewNat)

  def test : NewList Nat => [ 0 ]
}

module PullRequest1156 {
  def testIntro : Sig Nat ** Nat => (0 , 0)
  def testElim (p : Sig Nat ** Nat) : Nat
  | (a, b) => a
}
