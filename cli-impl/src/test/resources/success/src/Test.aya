open import prelude

def something (a : Nat)
 : a + 1 + a = 1 + a + a => refl

def issue1061 : Nat -> Nat
| n => Nat::suc n

module Issue942 {
  open import arith::nat::properties
  open inductive Wrapper (P : Type)
  | wrap (P -> Empty)

  def what? (m : Nat) : Wrapper (suc m = 0) =>
    wrap (\ x => zâ‰ s (pinv x))
}
